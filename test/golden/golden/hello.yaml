in_source: |
  str s1 "hello world!"
  : print_str
      begin
          dup @
          dup 0 != if
              out 1
              inc
          else
              drop
              exit
          then
      again
  ;
  s1 print_str
  halt
in_stdin: |

out_instructions: !!binary |
  /////wQAAAAEAAAESAAAAHAAAABcAAAADAAAAFwAAAAEAAAAIAAAAAQAABBYAAAATAAAABQAAAEsAAAABAAAFUQAAABgAAAABAAAFiwAAAAsAAAARAAAAHQAAAAEAAAERAAAAFQAAAA=
out_data: !!binary |
  AAAAaAAAAGUAAABsAAAAbAAAAG8AAAAgAAAAdwAAAG8AAAByAAAAbAAAAGQAAAAhAAAAAA==
out_stdout: |
  source LoC: 16 code instr: 25
  ============================================================
  output_buffer:hello world!
  ticks: 223

out_instructions_hex: |
  0 - 04000000 - lit 0
  1 - 04000004 - lit 4
  2 - 48000000 - call
  3 - 70000000 - halt
  4 - 5C000000 - dup
  5 - 0C000000 - load
  6 - 5C000000 - dup
  7 - 04000000 - lit 0
  8 - 20000000 - sub
  9 - 04000010 - lit 16
  10 - 58000000 - swap
  11 - 4C000000 - jz
  12 - 14000001 - out 1
  13 - 2C000000 - inc
  14 - 04000015 - lit 21
  15 - 44000000 - jump
  16 - 60000000 - drop
  17 - 04000016 - lit 22
  18 - 2C000000 - inc
  19 - 2C000000 - inc
  20 - 44000000 - jump
  21 - 74000000 - nop
  22 - 04000004 - lit 4
  23 - 44000000 - jump
  24 - 54000000 - ret
out_data_hex: |
  0 - 00000068
  1 - 00000065
  2 - 0000006C
  3 - 0000006C
  4 - 0000006F
  5 - 00000020
  6 - 00000077
  7 - 0000006F
  8 - 00000072
  9 - 0000006C
  10 - 00000064
  11 - 00000021
  12 - 00000000


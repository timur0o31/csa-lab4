in_source: |
  var h_result
  var l_result
  var val1
  var val2
  var value
  var len
  : print
      begin
          len @ 0 != if
          48 +
          out 1
          len @ dec len !
          else
              exit
          then
      again
  ;
  : int_to_digits
      begin
          dup 0 != if
          dup dup 10 swap /
          10 * swap - swap 10 swap /
          len @ inc len !
          else
              drop
              exit
          then
      again
  ;
  131072 131073 *2
  swap
  int_to_digits
  print
  32 out 1
  int_to_digits
  print
  halt
in_stdin:

out_instructions: !!binary |
  /////wQCAAAEAgABXAAAAAQAAAAIAAAAWAAAAFwAAAAEAAAADAAAABwAAAAEAAAACAAAACQAAAAEAAAADAAAAFgAAABYAAAABAAANUgAAAAEAAAcSAAAAAQAACAUAAABBAAANUgAAAAEAAAcSAAAAHAAAAAEAAAGDAAAA
  AQAAAAgAAAABAAALVgAAABMAAAABAAAMBgAAAAUAAABBAAABgwAAAAwAAAABAAABggAAAAEAAAxRAAAAAQAADIsAAAALAAAAEQAAAB0AAAABAAAHEQAAABUAAAAXAAAAAQAAAAgAAAABAAAT1gAAABMAAAAXAAAAFwAAAAEAAAKWAAAACgAAAAEAAAKJAAAAFgAAAAgAAAAWAAAAAQAAApYAAAAKAAAAAQAAAYMAAAALAAAAAQAAAYIAAAABAAAVEQAAABgAAAABAAAVSwAAAAsAAAARAAAAHQAAAAEAAA1RAAAAFQAAAA=
out_data: !!binary |
  AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
out_stdout: |
  source LoC: 37 code instr: 88
  ============================================================


out_instructions_hex: |
  0 - 04020000 - lit 131072
  1 - 04020001 - lit 131073
  2 - 5C000000 - dup
  3 - 04000000 - lit 0
  4 - 08000000 - store
  5 - 58000000 - swap
  6 - 5C000000 - dup
  7 - 04000000 - lit 0
  8 - 0C000000 - load
  9 - 1C000000 - mulh
  10 - 04000000 - lit 0
  11 - 08000000 - store
  12 - 24000000 - mul
  13 - 04000000 - lit 0
  14 - 0C000000 - load
  15 - 58000000 - swap
  16 - 58000000 - swap
  17 - 04000035 - lit 53
  18 - 48000000 - call
  19 - 0400001C - lit 28
  20 - 48000000 - call
  21 - 04000020 - lit 32
  22 - 14000001 - out 1
  23 - 04000035 - lit 53
  24 - 48000000 - call
  25 - 0400001C - lit 28
  26 - 48000000 - call
  27 - 70000000 - halt
  28 - 04000006 - lit 6
  29 - 0C000000 - load
  30 - 04000000 - lit 0
  31 - 20000000 - sub
  32 - 0400002D - lit 45
  33 - 58000000 - swap
  34 - 4C000000 - jz
  35 - 04000030 - lit 48
  36 - 18000000 - add
  37 - 14000001 - out 1
  38 - 04000006 - lit 6
  39 - 0C000000 - load
  40 - 30000000 - dec
  41 - 04000006 - lit 6
  42 - 08000000 - store
  43 - 04000031 - lit 49
  44 - 44000000 - jump
  45 - 04000032 - lit 50
  46 - 2C000000 - inc
  47 - 2C000000 - inc
  48 - 44000000 - jump
  49 - 74000000 - nop
  50 - 0400001C - lit 28
  51 - 44000000 - jump
  52 - 54000000 - ret
  53 - 5C000000 - dup
  54 - 04000000 - lit 0
  55 - 20000000 - sub
  56 - 0400004F - lit 79
  57 - 58000000 - swap
  58 - 4C000000 - jz
  59 - 5C000000 - dup
  60 - 5C000000 - dup
  61 - 0400000A - lit 10
  62 - 58000000 - swap
  63 - 28000000 - div
  64 - 0400000A - lit 10
  65 - 24000000 - mul
  66 - 58000000 - swap
  67 - 20000000 - sub
  68 - 58000000 - swap
  69 - 0400000A - lit 10
  70 - 58000000 - swap
  71 - 28000000 - div
  72 - 04000006 - lit 6
  73 - 0C000000 - load
  74 - 2C000000 - inc
  75 - 04000006 - lit 6
  76 - 08000000 - store
  77 - 04000054 - lit 84
  78 - 44000000 - jump
  79 - 60000000 - drop
  80 - 04000055 - lit 85
  81 - 2C000000 - inc
  82 - 2C000000 - inc
  83 - 44000000 - jump
  84 - 74000000 - nop
  85 - 04000035 - lit 53
  86 - 44000000 - jump
  87 - 54000000 - ret
out_data_hex: |
  0 - 00000000
  1 - 00000000
  2 - 00000000
  3 - 00000000
  4 - 00000000
  5 - 00000000
  6 - 00000000
